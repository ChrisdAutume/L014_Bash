 #!/bin/bash

#-------------------------------------------------------------TestB----------------------------------------------------------
function TestB {

  # $1 Chemin/

  inden+="\t"
  for fichier in $RacineB$(basename $RacineA)/$1* ; do

  local fichier="$(sed "s|$RacineB$(basename $RacineA)/||" <<< $fichier)"
  local line=$(egrep "^$RacineA $fichier/? .*$" $RacineB.synchro)

    # echo ""
    # echo -e "\e[4mTestB \e[0m"
    # echo -e "\e[1mRacineA:\e[0m $RacineA"
    # echo -e "\e[1mRacineB\e[0m $RacineB"
    # echo -e "\e[1mChemin\e[0m $fichier"
    # echo ""

    # echo $fichier
    if [[ ! ( -e "$RacineA$fichier" ) &&  -e "$RacineB$(basename "$RacineA")/$fichier" ]]; then #si est dans RacineB, pas dans RacineA
      if [[ -z $line ]]; then
      # echo "MAJA"
        MAJ "$RacineB$(basename "$RacineA")/$fichier" "$RacineA$fichier" 1 "$fichier"
      else
      # echo "supprimeB"
        Sup "$fichier" "$RacineB$(basename $RacineA)/$fichier"

      fi
    elif [[ -d "$RacineA$fichier" && -d "$RacineB$(basename "$RacineA")/$fichier" ]]; then
      echo -e "$inden Vérification du dossier '\e[4m$RacineB$(basename "$RacineA")/$fichier\e[0m'"
      TestB "$1$fichier/"
     else
       echo -e "$inden\e[42mfichier\e[0m: '\e[4m$RacineB$(basename "$RacineA")/$fichier\e[0m' verifié"
    fi
  done
  inden=${inden::-2}
}

#-----------------------------------------------------------supprimer------------------------------------------------------------

function Sup {
  # $1 chemin
  # $2 Fichier/directory à supprimer

  # echo ""
  # echo -e "\e[4mSup\e[0m"
  # echo -e "\e[1mRacineA:\e[0m $RacineA"
  # echo -e "\e[1mChemin:\e[0m $1"
  # echo -e "\e[1mFichier à supprimer:\e[0m $2"
  # echo ""

  echo -e "$inden\e[1mSuppression:\e[0m de chemin '\e[4m$1\e[0m' à '\e[4m$2\e[0m'"
  rm -rfv $2 >> $RacineB.log

  egrep -v "^$RacineA $1.*$" $RacineB.synchro > ~/.temp

  mv ~/.temp $RacineB.synchro
  # rm -r ~/.temp
}

#--------------------------------------------------------------Mise à Jour---------------------------------------------------

function MAJ {
  # $1 Fichier/directory à déplacer
  # $2 Chemin à le mettre
  # $3 avec écriture dans le .synchro
  # $4 chemin

  # echo ""
  # echo -e "\e[4mMAJ \e[0m"
  # echo -e "\e[1mRacineA:\e[0m $RacineA"
  # echo -e "\e[1mFichier à déplacer:\e[0m $1"
  # echo -e "\e[1mChemin ou le mettre:\e[0m $2"
  # echo ""
echo -e "$inden\e[1mTransfert:\e[0m de chemin '\e[4m$1\e[0m' à '\e[4m$2\e[0m'"
  cp -rvf --preserve=all $1 $2 >> $RacineB.log
  if [[ $3 -eq 1 ]]; then
    if [[ -d $1 ]]; then
      # echo -e "\e[1mDirectory:\e[0m"
      echo "$RacineA" "$4" "`stat -c "%a" $1`" "`stat -c "%Y" $1`" "`stat -c "%s" $1`" "`stat -c "%G" $1`" "`stat -c "%U" $1`" >> $RacineB.synchro
      "$(dirname $0)"/ecrire_synchro "$RacineA$4" "$RacineA" "$RacineB.synchro"
    else
      # echo -e "\e[1mFichier:\e[0m"
      echo "$RacineA" "$4" "`stat -c "%a" $1`" "`stat -c "%Y" $1`" "`stat -c "%s" $1`" "`stat -c "%G" $1`" "`stat -c "%U" $1`" >> $RacineB.synchro
      fi
  fi
}

#---------------------------------------------------------TestSynchro-----------------------------------------------------

function TestSynchro {

  # $1 Chemin/

  inden+="\t"
  for fichier in  $RacineA$1* ; do

  local fichier="$(sed "s|$RacineA||" <<< $fichier)"

    # echo ""
    # echo -e "\e[4mTestSynchro\e[0m"
    # echo -e "\e[1mRacineA:\e[0m $RacineA"
    # echo -e "\e[1mRacineB:\e[0m $RacineB"
    # echo -e "\e[1mChemin:\e[0m $fichier"

    line=$(egrep "^$RacineA $fichier/? .*$" $RacineB.synchro)
    # echo -e "\e[1mGrep .synchro:\e[0m $line"


    if [[ -e "$RacineA$fichier" && ! ( -e "$RacineB$(basename "$RacineA")/$fichier" ) ]]  ; then #si est dans RacineA, pas dans RacineB
      if [[ -z $line ]]; then #pas dans le .synchro
      #copie colle le fichier/directory avec ecriture
        # echo "MAJB"
        MAJ "$RacineA$fichier" "$RacineB$(basename "$RacineA")/$fichier" 1 "$fichier"
      else # dans le point synchro
      #supprime le fichier/dossier et la ligne du .synchro
        # echo "supprimeA"
        Sup "$fichier" "$RacineA$fichier"
      fi

    elif [[ -d "$RacineA$fichier" && -d "$RacineB$(basename "$RacineA")/$fichier" && -n $line ]] ; then #si directory present dans les deux racine et dans le journal
    #recursive
       echo -e "$inden Synchronisation du dossier '\e[4m$RacineA$fichier\e[0m'"
      TestSynchro "$fichier/"

    elif [[ -f "$RacineA$fichier" && -f "$RacineB$(basename "$RacineA")/$fichier" && -n $line ]]; then #si fichier présent dans les deux racine et dans le journal
      # echo "meta"

    local  Jperm=$(cut -f 3 -d ' ' <<< "$line")
    local  Jmodif=$(cut -f 4 -d ' ' <<< "$line")
    local  Jsize=$(cut -f 5 -d ' ' <<< "$line")
    local  Jidgroup=$(cut -f 6 -d ' ' <<< "$line")
    local  Jidowner=$(cut -f 7 -d ' ' <<< "$line")
    # Jperm=$(sed "s|^$RacineA ${3}$fichier \([0-9]\{3\}\).*|\1|" <<< $line )
    # Jmodif=$(sed "s|^$RacineA ${3}$fichier [0-9]\{3\} \([^ ]*\).*|\1|" <<< $line )
    # Jsize=$(sed "s|^$RacineA ${3}$fichier [0-9]\{3\} [^ ]* \([^ ]*\).*|\1|" <<< $line )
    # Jidgroup=$(sed "s|^$RacineA ${3}$fichier [0-9]\{3\} [^ ]* [^ ]* \([^ ]*\).*|\1|" <<< $line )
    # Jidowner=$(sed "s|^$RacineA ${3}$fichier [0-9]\{3\} [^ ]* [^ ]* [^ ]* \([^ ]*\).*|\1|" <<< $line )

      # echo $Jperm
      # echo $Jmodif
      # echo $Jsize
      # echo $Jidgroup
      # echo $Jidowner

    #faire different test sur les metadonnée
      if [[ $(stat -c "%Y" "$RacineA$fichier") -ne $Jmodif && $(stat -c "%Y" "$RacineB$(basename "$RacineA")/$fichier") -eq $Jmodif ]]; then #si modification fichier racineB est comme le journal pas racineA
        MAJ "$RacineB$(basename "$RacineA")/$fichier" "$RacineA$fichier" 0 "$fichier"

        sed -i "s|^\($RacineA ${3}$fichier [0-9]\{3\}\) [^ ]* [^ ]* \(.*\)$|\1 $(stat -c "%Y" "$RacineA$fichier") $(stat -c "%s" "$RacineA$fichier") \2|" $RacineB.synchro #modification de la date et de la taille dans .synchro

        # echo "modificationA"

      elif [[ $(stat -c "%Y" "$RacineA$fichier") -eq $Jmodif && $(stat -c "%Y" "$RacineB$(basename "$RacineA")/$fichier") -ne $Jmodif ]]; then #si modification fichier racineA est comme le journal pas racineB
        MAJ "$RacineB$(basename "$RacineA")/$fichier" "$RacineA$fichier" 0 "$fichier"

        sed -i "s|^\($RacineA ${3}$fichier [0-9]\{3\}\) [^ ]* [^ ]* \(.*\)$|\1 $(stat -c "%Y" "$RacineB$(basename "$RacineA")/$fichier") $(stat -c "%s" "$RacineB$(basename "$RacineA")/$fichier") \2|" $RacineB.synchro #modification de la date et de la taille dans .synchro

        # echo "modificationB"
      elif [[ true ]]; then

        if [[ $(stat -c "%a" "$RacineA$fichier") -eq $Jperm && $(stat -c "%a" "$RacineB$(basename "$RacineA")/$fichier") -ne $Jperm ]]; then #si permission fichier racineA est comme le journal mais pas racineB
        #change permission
          chmod -v "$(stat -c "%a" "$RacineB$(basename "$RacineA")/$fichier")" "$RacineA$fichier" >> $RacineB.log

          sed -i "s|^\($RacineA $fichier\) [0-9]\{3\} \(.*\)$|\1 $(stat -c "%a" "$RacineB$(basename "$RacineA")/$fichier") \2|" $RacineB.synchro

          Jperm=$(stat -c "%a" "$RacineB$(basename "$RacineA")/$fichier")

          # echo "permissionB"
        fi

        if [[ $(stat -c "%G" "$RacineA$fichier") = "$Jidgroup" && $(stat -c "%G" "$RacineB$(basename "$RacineA")/$fichier") != "$Jidgroup" ]]; then
      #si groupe owner racineA egale au journal et pas racineB
          sudo chown -v :"$(stat -c "%G" "$RacineB$(basename "$RacineA")/$fichier")" "$RacineA$fichier" >> $RacineB.log

          sed -i "s|^\($RacineA $fichier [0-9]\{3\} [^ ]* [^ ]*\) [^ ]* \(.*\)$|\1 $(stat -c "%G" "$RacineB$(basename "$RacineA")/$fichier") \2|" $RacineB.synchro # modification du groupe dans .synchro

          Jidgroup=$(stat -c "%G" "$RacineB$(basename "$RacineA")/$fichier")

          # echo "idgroupB"
        fi

        if [[ $(stat -c "%U" "$RacineA$fichier") = "$Jidowner" && $(stat -c "%U" "$RacineB$(basename "$RacineA")/$fichier") != "$Jidowner" ]]; then #si owner racineA egale au journal et pas racineB
          sudo chown -v "$(stat -c "%U" "$RacineB$(basename "$RacineA")/$fichier")" "$RacineA$fichier" >> $RacineB.log

          sed -i "s|^\($RacineA $fichier [0-9]\{3\} [^ ]* [^ ]* [^ ]*\) [^ ]*|\1 $(stat -c "%U" "$RacineB$(basename "$RacineA")/$fichier")|" $RacineB.synchro # modification du owner dans .synchro

          Jidowner=$(stat -c "%U" "$RacineB$(basename "$RacineA")/$fichier")

          # echo "idownerB"
        fi



        if [[ $(stat -c "%a" "$RacineA$fichier") -ne $Jperm && $(stat -c "%a" "$RacineB$(basename "$RacineA")/$fichier") -eq $Jperm ]]; then #si permission fichier racineB est comme le journal mais pas racineA
          chmod -v "$(stat -c "%a" "$RacineA$fichier")" "$RacineB$(basename "$RacineA")/$fichier" >> $RacineB.log

          sed -i "s|^\($RacineA $fichier\) [0-9]\{3\} \(.*\)$|\1 $(stat -c "%a" "$RacineA$fichier") \2|" $RacineB.synchro

          Jperm=$(stat -c "%a" "$RacineA$fichier")

          # echo "permissionA"
        fi


        if [[ $(stat -c "%G" "$RacineA$fichier") != "$Jidgroup" && $(stat -c "%G" "$RacineB$(basename "$RacineA")/$fichier") = "$Jidgroup" ]]; then #si groupe owner racineB egale au journal et pas racineA
          sudo chown -v :"$(stat -c "%G" "$RacineA$fichier")" "$RacineB$(basename "$RacineA")/$fichier" >> $RacineB.log

          sed -i "s|^\($RacineA $fichier [0-9]\{3\} [^ ]* [^ ]* [^ ]*\) [^ ]*|\1 $(stat -c "%U" "$RacineA$fichier")|" $RacineB.synchro # modification du owner dans .synchro

          Jidgroup=$(stat -c "%U" "$RacineA$fichier")

          # echo "idgroupA"
        fi

        if [[ $(stat -c "%U" "$RacineA$fichier") != "$Jidowner" && $(stat -c "%U" "$RacineB$(basename "$RacineA")/$fichier") = "$Jidowner" ]]; then #si owner racineB egale au journal et pas racineA
          sudo chown -v "$(stat -c "%U" "$RacineA$fichier")" "$RacineB$(basename "$RacineA")/$fichier" >> $RacineB.log

          sed -i "s|^\($RacineA $fichier [0-9]\{3\} [^ ]* [^ ]* [^ ]*\) [^ ]*|\1 $(stat -c "%U" "$RacineA$fichier")|" $RacineB.synchro # modification du owner dans .synchro

          Jidowner=$(stat -c "%U" "$RacineA$fichier")

          # echo "idownerA"
        fi

        if [[ $(stat -c "%U" "$RacineA$fichier") = "$Jidowner" && $(stat -c "%U" "$RacineB$(basename "$RacineA")/$fichier") = "$Jidowner" && $(stat -c "%a" "$RacineA$fichier") -eq $Jperm && $(stat -c "%a" "$RacineB$(basename "$RacineA")/$fichier") -eq $Jperm && $(stat -c "%Y" "$RacineA$fichier") -eq $Jmodif && $(stat -c "%Y" "$RacineB$(basename "$RacineA")/$fichier") -eq $Jmodif && $(stat -c "%G" "$RacineA$fichier") = "$Jidgroup" && $(stat -c "%G" "$RacineB$(basename "$RacineA")/$fichier") = "$Jidgroup" ]]; then #verifie si il l'y a pas de conflit

          echo -e "$inden\e[42mfichier\e[0m: '\e[4m$RacineA$fichier\e[0m' synchronisé"

        else
          echo "$fichier" >> $RacineB.conflit
          echo -e "$inden\e[41mconflit\e[0m: entre les fichier '\e[4m$RacineA$fichier\e[0m' et '\e[4m$RacineB$(basename $RacineA)/$fichier\e[0m'"
        fi
      else
        echo "$fichier" >> $RacineB.conflit
        echo -e "$inden\e[41mconflit\e[0m: '\e[4m$RacineA$fichier\e[0m' et '\e[4m$RacineB$(basename $RacineA)/$fichier\e[0m' ne sont pas de même type."
      fi
    fi
  done
  inden=${inden::-2}
}

#----------------------------------------------Main----------------------------------------------------------------------------
# $1 RacineA/
# $2 RacineB/
# $3 Chemin/

RacineA=$1
RacineB=$2
Chemin=$3


# echo ""
# echo -e "\e[4mMain\e[0m"
# echo -e "\e[1mRacineA:\e[0m $RacineA"
# echo -e "\e[1mRacineB:\e[0m $RacineB"
# echo -e "\e[1mChemin:\e[0m $Chemin"
echo ----------"$(date)"---------- >> $RacineB.log
echo "" >> $RacineB.log

echo -e "\n\e[7mScan de RacineA\e[0m\n"

inden="\t"

Tgrep=$(egrep "^$RacineA $Chemin/? .*$" $RacineB.synchro 2> /dev/null)

if [[ -d $RacineA$Chemin && -z $Tgrep ]]; then # marche pas
  MAJ "$RacineA$Chemin" "$RacineB$Chemin" 1 "$Chemin"
fi


inden=""

TestSynchro "$Chemin" "0"

echo -e "\n\e[7mScan de RacineB\e[0m\n"

inden=""

TestB "$Chemin" "0"

# echo -e "\n\e[7mFIN boucle B\e[0m\n"

#test .synchro si on a pas des ligne en trop, si oui, on le supprime et on le signale à l'utilisateur

awk ' BEGIN {FS=" "}
  {
    if(NR!=1)
    {
      if(system("[ -e "$1$2" ]") == 1)
      {
        next
      }
    else
      {
        print
      }
    }
  else
    {
      print
    }
  }
' $RacineB.synchro > tmpfile && mv tmpfile $RacineB.synchro

echo ""
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
echo "FIN SYNCHONISATION"
echo "" >> $RacineB.log
