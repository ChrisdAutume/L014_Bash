 #!/bin/bash



#-------------------------------------------------------------TestB---------------------------------------------------------------
function TestB {

  # $1 RacineA
  # $2 RacineB
  # $3 Chemin



  for fichier in $(ls $2"$(basename $1)"/$3); do

    echo ""
    echo -e "\e[4mTestB \e[0m"
    echo -e "\e[1mRacineA:\e[0m $1"
    echo -e "\e[1mRacineB\e[0m $2"
    echo -e "\e[1mChemin\e[0m $3$fichier"
    echo ""

    if [[ ! ( -e "$1$3$fichier" ) &&  -e "$2$(basename "$1")/$3$fichier" ]]; then #si est dans RacineB, pas dans RacineA
      echo "MAJA"
      MAJ "$1" "$2$(basename "$1")/$3$fichier" "$1$3$fichier" 1 "$2.synchro" "$3$fichier"
    elif [[ -d "$1$3$fichier" && -d "$2$(basename "$1")/$3$fichier" && -n $line ]]; then
      TestB "$1" "$2" "$3$fichier"
    else
      echo "good"
    fi
  done
}

#-----------------------------------------------------------supprimer------------------------------------------------------------

function Sup {
  #$1 RacineA
  #$2 chemin
  #$3 Fichier/directory à supprimer
  #$4 RacineB/.synchro

  echo ""
  echo -e "\e[4mSup\e[0m"
  echo -e "\e[1mRacineA:\e[0m $1"
  echo -e "\e[1mChemin:\e[0m $2"
  echo -e "\e[1mFichier à supprimer:\e[0m $3"
  echo ""

  rm -rfv $3

  egrep -v "^$1 $2.*$" $4 > ~/.temp

  cp ~/.temp $4
  rm -r ~/.temp
}

#--------------------------------------------------------------Mise à Jour---------------------------------------------------------

function MAJ {
  #$1 RacineA
  #$2 Fichier/directory à déplacer
  #$3 Chemin à le mettre
  #$4 avec écriture dans le .synchro
  #$5 RacineB/.synchro
  #$6 chemin
  echo ""
  echo -e "\e[4mMAJ \e[0m"
  echo -e "\e[1mRacineA:\e[0m $1"
  echo -e "\e[1mFichier à déplacer:\e[0m $2"
  echo -e "\e[1mChemin ou le mettre:\e[0m $3"
  echo ""

  cp -rvf --preserve=all $2 $3
  if [[ $4 -eq 1 ]]; then
    if [[ -d $2 ]]; then
      echo -e "\e[1mDirectory:\e[0m"
      echo "$1" "$6" "`stat -c "%a" $2`" "`stat -c "%Y" $2`" "`stat -c "%s" $2`" "`stat -c "%G" $2`" "`stat -c "%U" $2`" >> $5
      "$(dirname $0)"/ecrire_synchro "$1$6" "$1" "$5"
    else
      echo -e "\e[1mFichier:\e[0m"
      echo "$1" "$6" "`stat -c "%a" $2`" "`stat -c "%Y" $2`" "`stat -c "%s" $2`" "`stat -c "%G" $2`" "`stat -c "%U" $2`" >> $5
      fi
  fi
}

#---------------------------------------------------------TestSynchro-----------------------------------------------------

function TestSynchro {

  #$1 RacineA/
  #$2 RacineB/
  #$3 Chemin/

  for fichier in $(ls $1$3); do

    echo ""
    echo -e "\e[4mTestSynchro\e[0m"
    echo -e "\e[1mRacineA:\e[0m $1"
    echo -e "\e[1mRacineB:\e[0m $2"
    echo -e "\e[1mChemin:\e[0m $3$fichier"

    line=$(egrep "^$1 $3$fichier/? .*$" $2.synchro)
    echo -e "\e[1mGrep .synchro:\e[0m $line"


    if [[ -e "$1$3$fichier" && ! ( -e "$2$(basename "$1")/$3$fichier" ) ]]  ; then #si est dans RacineA, pas dans RacineB
      if [[ -z $line ]]; then #pas dans le .synchro
      #copie colle le fichier/directory avec ecriture
        echo "MAJB"
        MAJ "$1" "$1$3$fichier" "$2$(basename "$1")/$3$fichier" 1 "$2.synchro" "$3$fichier"
      else # dans le point synchro
      #supprime le fichier/dossier et la ligne du .synchro
        echo "supprimeA"
        Sup "$1" "$3$fichier" "$1$3$fichier" "$2.synchro"
      fi

    elif [[ -d "$1$3$fichier" && -d "$2$(basename "$1")/$3$fichier" && -n $line ]] ; then #si directory present dans les deux racine et dans le journal
    #recursive
      echo "recur"
      TestSynchro "$RacineA" "$RacineB" "$3$fichier/" "$(expr $4 + 1 )"

    elif [[ -f "$1$3$fichier" && -f "$2$(basename "$1")/$3$fichier" && -n $line ]]; then #si fichier présent dans les deux racine et dans le journal
      echo "meta"

      Jperm=$(cut -f 3 -d ' ' <<< "$line")
      Jmodif=$(cut -f 4 -d ' ' <<< "$line")
      Jsize=$(cut -f 5 -d ' ' <<< "$line")
      Jidgroup=$(cut -f 6 -d ' ' <<< "$line")
      Jidowner=$(cut -f 7 -d ' ' <<< "$line")
    # Jperm=$(sed "s|^${1} ${3}${fichier} \([0-9]\{3\}\).*|\1|" <<< $line )
    # Jmodif=$(sed "s|^${1} ${3}${fichier} [0-9]\{3\} \([^ ]*\).*|\1|" <<< $line )
    # Jsize=$(sed "s|^${1} ${3}${fichier} [0-9]\{3\} [^ ]* \([^ ]*\).*|\1|" <<< $line )
    # Jidgroup=$(sed "s|^${1} ${3}${fichier} [0-9]\{3\} [^ ]* [^ ]* \([^ ]*\).*|\1|" <<< $line )
    # Jidowner=$(sed "s|^${1} ${3}${fichier} [0-9]\{3\} [^ ]* [^ ]* [^ ]* \([^ ]*\).*|\1|" <<< $line )

      echo $Jperm
      echo $Jmodif
      echo $Jsize
      echo $Jidgroup
      echo $Jidowner

    #faire different test sur les metadonnée
      if [[ $(stat -c "%Y" "$1$3$fichier") -ne $Jmodif && $(stat -c "%Y" "$2$(basename "$1")/$3$fichier") -eq $Jmodif ]]; then #si modification fichier racineB est comme le journal pas racineA
        MAJ "$1" "$2$(basename "$1")/$3$fichier" "$1$3$fichier" 0 "$2.synchro" "$3$fichier"

        sed -i "s|^\(${1} ${3}${fichier} [0-9]\{3\}\) [^ ]* [^ ]* \(.*\)$|\1 $(stat -c "%Y" "$1$3$fichier") $(stat -c "%s" "$1$3$fichier") \2|" $2.synchro #modification de la date et de la taille dans .synchro

        echo "modificationA"

      elif [[ $(stat -c "%Y" "$1$3$fichier") -eq $Jmodif && $(stat -c "%Y" "$2$(basename "$1")/$3$fichier") -ne $Jmodif ]]; then #si modification fichier racineA est comme le journal pas racineB
        MAJ "$1" "$2$(basename "$1")/$3$fichier" "$1$3$fichier" 0 "$2.synchro" "$3$fichier"

        sed -i "s|^\(${1} ${3}${fichier} [0-9]\{3\}\) [^ ]* [^ ]* \(.*\)$|\1 $(stat -c "%Y" "$2$(basename "$1")/$3$fichier") $(stat -c "%s" "$2$(basename "$1")/$3$fichier") \2|" $2.synchro #modification de la date et de la taille dans .synchro

        echo "modificationB"
      elif [[ true ]]; then

        if [[ $(stat -c "%a" "$1$3$fichier") -eq $Jperm && $(stat -c "%a" "$2$(basename "$1")/$3$fichier") -ne $Jperm ]]; then #si permission fichier racineA est comme le journal mais pas racineB
        #change permission
          chmod "$(stat -c "%a" "$2$(basename "$1")/$3$fichier")" "$1$3$fichier"

          sed -i "s|^\(${1} ${3}${fichier}\) [0-9]\{3\} \(.*\)$|\1 $(stat -c "%a" "$2$(basename "$1")/$3$fichier") \2|" $2.synchro

          Jperm=$(stat -c "%a" "$2$(basename "$1")/$3$fichier")

          echo "permissionB"
        fi

        if [[ $(stat -c "%G" "$1$3$fichier") = "$Jidgroup" && $(stat -c "%G" "$2$(basename "$1")/$3$fichier") != "$Jidgroup" ]]; then
      #si groupe owner racineA egale au journal et pas racineB
          sudo chown :"$(stat -c "%G" "$2$(basename "$1")/$3$fichier")" "$1$3$fichier"

          sed -i "s|^\(${1} ${3}${fichier} [0-9]\{3\} [^ ]* [^ ]*\) [^ ]* \(.*\)$|\1 $(stat -c "%G" "$2$(basename "$1")/$3$fichier") \2|" $2.synchro # modification du groupe dans .synchro

          Jidgroup=$(stat -c "%G" "$2$(basename "$1")/$3$fichier")

          echo "idgroupB"
        fi

        if [[ $(stat -c "%U" "$1$3$fichier") = "$Jidowner" && $(stat -c "%U" "$2$(basename "$1")/$3$fichier") != "$Jidowner" ]]; then #si owner racineA egale au journal et pas racineB
          sudo chown "$(stat -c "%U" "$2$(basename "$1")/$3$fichier")" "$1$3$fichier"

          sed -i "s|^\(${1} ${3}${fichier} [0-9]\{3\} [^ ]* [^ ]* [^ ]*\) [^ ]*|\1 $(stat -c "%U" "$2$(basename "$1")/$3$fichier")|" $2.synchro # modification du owner dans .synchro

          Jidowner=$(stat -c "%U" "$2$(basename "$1")/$3$fichier")

          echo "idownerB"
        fi



        if [[ $(stat -c "%a" "$1$3$fichier") -ne $Jperm && $(stat -c "%a" "$2$(basename "$1")/$3$fichier") -eq $Jperm ]]; then #si permission fichier racineB est comme le journal mais pas racineA
          chmod "$(stat -c "%a" "$1$3$fichier")" "$2$(basename "$1")/$3$fichier"

          sed -i "s|^\(${1} ${3}${fichier}\) [0-9]\{3\} \(.*\)$|\1 $(stat -c "%a" "$1$3$fichier") \2|" $2.synchro

          Jperm=$(stat -c "%a" "$1$3$fichier")

          echo "permissionA"
        fi


        if [[ $(stat -c "%G" "$1$3$fichier") != "$Jidgroup" && $(stat -c "%G" "$2$(basename "$1")/$3$fichier") = "$Jidgroup" ]]; then #si groupe owner racineB egale au journal et pas racineA
          sudo chown :"$(stat -c "%G" "$1$3$fichier")" "$2$(basename "$1")/$3$fichier"

          sed -i "s|^\(${1} ${3}${fichier} [0-9]\{3\} [^ ]* [^ ]* [^ ]*\) [^ ]*|\1 $(stat -c "%U" "$1$3$fichier")|" $2.synchro # modification du owner dans .synchro

          Jidgroup=$(stat -c "%U" "$1$3$fichier")

          echo "idgroupA"
        fi

        if [[ $(stat -c "%U" "$1$3$fichier") != "$Jidowner" && $(stat -c "%U" "$2$(basename "$1")/$3$fichier") = "$Jidowner" ]]; then #si owner racineB egale au journal et pas racineA
          sudo chown "$(stat -c "%U" "$1$3$fichier")" "$2$(basename "$1")/$3$fichier"

          sed -i "s|^\(${1} ${3}${fichier} [0-9]\{3\} [^ ]* [^ ]* [^ ]*\) [^ ]*|\1 $(stat -c "%U" "$1$3$fichier")|" $2.synchro # modification du owner dans .synchro

          Jidowner=$(stat -c "%U" "$1$3$fichier")

          echo "idownerA"
        fi

        if [[ $(stat -c "%U" "$1$3$fichier") = "$Jidowner" && $(stat -c "%U" "$2$(basename "$1")/$3$fichier") = "$Jidowner" && $(stat -c "%a" "$1$3$fichier") -eq $Jperm && $(stat -c "%a" "$2$(basename "$1")/$3$fichier") -eq $Jperm && $(stat -c "%Y" "$1$3$fichier") -eq $Jmodif && $(stat -c "%Y" "$2$(basename "$1")/$3$fichier") -eq $Jmodif && $(stat -c "%G" "$1$3$fichier") = "$Jidgroup" && $(stat -c "%G" "$2$(basename "$1")/$3$fichier") = "$Jidgroup" ]]; then #verifie si il l'y a pas de conflit

          echo "good"

        else
          echo "$3" >> $2.conflit
          echo "conflit"
        fi
      else
        echo "$3" >> $2.conflit
        echo "conflit"
      fi
    fi
  done
}

#----------------------------------------------Main----------------------------------------------------------------------------
# $1 RacineA/
# $2 RacineB/
# $3 Chemin/
# $4 niveau de récurcivité

RacineA=$1
RacineB=$2
Chemin=$3


echo ""
echo -e "\e[4mMain\e[0m"
echo -e "\e[1mRacineA:\e[0m $RacineA"
echo -e "\e[1mRacineB:\e[0m $RacineB"
echo -e "\e[1mChemin:\e[0m $Chemin"


if [[ -d $RacineA$Chemin && -z $(egrep "^$RacineA $Chemin/? .*$" $RacineB.synchro) ]]; then
  MAJ "$RacineA" "$RacineA$Chemin" "$RacineB$Chemin" 1 "$RacineB.synchro" "$3"
fi


  TestSynchro "$RacineA" "$RacineB" "$Chemin"

  echo -e "\n\e[7mFIN boucle A\e[0m\n"

  TestB "$RacineA" "$RacineB" "$Chemin"

    echo -e "\n\e[7mFIN boucle B\e[0m\n"
  #test J pour ligne en trop

  awk'

  ' $RacineB.synchro

  echo ----------------------------------------------------------------
  echo FIN

  #régler conflit
