#!/bin/bash
conFile="$2.conflit"
RacineA="$1"
RacineB="$2"
contentDiff=1
metaDiff=1

function Metadata_sup {
  rm -rvf "$RacineA$line" "$RacineB$(basename $RacineA)/$line" >> $RacineB.log

  egrep -v "^$RacineA $line.*$" $RacineB.synchro > ~/.temp

  mv ~/.temp $RacineB.synchro
}

function Metadata_CP {
  # $1 Fichier/directory à déplacer
  # $2 Chemin à le mettre
  # $3 chemin

  Sup $line $2
  MAJ $1 $2 1 $line

}

function Metadata_manuelle{
  echo -e "\e[1mGestion manuelle:\e[0m"

  while read -u 9 line; do
      options2=("Supprimer" "Copier-Coller" "Permission" "GroupeOwner" "Owner" "Ignorer")
      print
      select opt2 in "${options[@]}"; do
        error=0
        case $opt2 in
            "Supprimer")
                Metadata_sup
              ;;

            "Copier-Coller")

              options3=("A => B" "A <= B" "Retour")
              select opt3 in "${options3[@]}"; do
                case $opt3 in
                  "A => B")
                    Metadata_CP "$RacineA$line" "$RacineB$(basename $RacineA)/$line" "$line"
                    break
                    ;;
                  "A <= B")
                    Metadata_CP "$RacineB$(basename $RacineA)/$line" "$RacineA$line" "$line"
                    break
                    ;;
                  "Retour")
                    break
                    ;;
                    *)
                      echo options invalide
                    ;;
                esac
              done

              ;;

            "Permission")
              options3=("A => B" "A <= B" "Retour")
              select opt3 in "${options3[@]}"; do
                case $opt3 in
                  "A => B")
                    Modif_perm "$RacineB$(basename $RacineA)/$line" "$RacineA$line" "$line"
                    break
                    ;;
                  "A <= B")
                    Modif_perm "$RacineA$line" "$RacineB$(basename $RacineA)/$line" "$line"
                    break
                    ;;
                  "Retour")
                    break
                    ;;
                  *)
                    echo options invalide
                    ;;
                esac
              done
              ;;

            "GroupeOwner")
              options3=("A => B" "A <= B" "Retour")
              select opt3 in "${options3[@]}"; do
                case $opt3 in
                  "A => B")
                    Modif_group "$RacineB$(basename $RacineA)/$line" "$RacineA$line" "$line"
                    break
                    ;;
                  "A <= B")
                    Modif_group "$RacineA$line" "$RacineB$(basename $RacineA)/$line" "$line"
                    break
                    ;;
                  "Retour")
                    break
                    ;;
                  *)
                    echo options invalide
                    ;;
                esac
              done
              ;;

            "Owner")
              options3=("A => B" "A <= B" "Retour")
                select opt3 in "${options3[@]}"; do
                  case $opt3 in
                    "A => B")
                      Modif_owner "$RacineB$(basename $RacineA)/$line" "$RacineA$line" "$line"
                      break
                      ;;
                    "A <= B")
                      Modif_owner "$RacineA$line" "$RacineB$(basename $RacineA)/$line" "$line"
                      break
                      ;;
                    "Retour")
                      break
                      ;;
                    *)
                      echo options invalide
                      ;;
                  esac
                done
              ;;

            "Ignorer")
                break
              ;;

            *)
            echo options invalide
                error=1
                ;;
        esac
        if [[ $error -eq 0 ]]; then
          if [[ $(stat -c "%U" "$RacineA$fichier") = "$Jidowner" && $(stat -c "%U" "$RacineB$(basename "$RacineA")/$fichier") = "$Jidowner" && $(stat -c "%a" "$RacineA$fichier") -eq $Jperm && $(stat -c "%a" "$RacineB$(basename "$RacineA")/$fichier") -eq $Jperm && $(stat -c "%Y" "$RacineA$fichier") -eq $Jmodif && $(stat -c "%Y" "$RacineB$(basename "$RacineA")/$fichier") -eq $Jmodif && $(stat -c "%G" "$RacineA$fichier") = "$Jidgroup" && $(stat -c "%G" "$RacineB$(basename "$RacineA")/$fichier") = "$Jidgroup" ]]; then #fichier egale
          break

          else
            print
            cat<<EOF
  1) Supprimer
  2) Copier-Coller
  3) Permission
  4) Owner
  5) GroupeOwner
  5) Ignorer
EOF
          fi
        fi
      done
      clear
  done 9< $conFile

}

function Metadata_automatique {
  while read line
  do
    fileA="$RacineA$line"
    fileB="$RacineB$(basename $RacineA)/$line"
    if [[ $(stat -c "%Y" $fileA) -gt $(stat -c "%Y" $fileB) ]] ; then #si le fichier en racine A est plus récent que celui en racine B
      echo -e "remplacement des métadonnées de $fileB par celles de $fileA"
      changeMetadata "$fileA" "$fileB" "$line"
    else
      echo -e "remplacement des métadonnées de $fileA par celles de $fileB"
      changeMetadata "$fileB" "$fileA" "$line"
    fi
  done < $conFile
}

function Data_automatique {
  echo -e "\e[1mGestion automatique...:\e[0m"
  while -u 3 read line
  do
    fileA="$RacineA$line"
    fileB="$RacineB$(basename $RacineA)/$line"
    if [[ $(stat -c "%Y" $fileA) -gt $(stat -c "%Y" $fileB) ]] ; then #si le fichier en racine A est plus récent que celui en racine B
      echo -e "remplacement ddu contenu de $fileB par $fileA"
      cp --preserve=all $fileA $fileB
    else
      echo -e "remplacement ddu contenu de $fileA par $fileB"
      cp --preserve=all $fileB $fileA
    fi
  done 3< "$conFile"
  echo -e "remplacement terminé"
}

function Data_manuelle {

    clear
    echo -e "\e[1mGestion manuelle:\e[0m"
    #diff racineA/solve.sh racineB/racineA/solve.sh | grep '^[0-9]' | grep ','
    #diff racineA/solve.sh racineB/racineA/solve.sh | grep '^[0-9]' | grep -v ','
    #diff output: XX ,XXletterXX, XX
    #           line begin in file 1, line ending in file1 type of change line begin in file 2, line ending in file2
    while read -u 3 line
    do
      fileA="$RacineA$line"
      fileB="$RacineB$(basename $RacineA)/$line"
      #fileDiff=$(diff "$fileA" "$fileB" | grep '^[0-9]')
      fileLine=$(diff --speed-large-files "$fileA" "$fileB" | grep '^[0-9]' | head -n 1)
      while [[ -n "$fileLine" ]]
      do

        echo "-------------------------------DIFF RESULTS-------------------------------"
        diff "$fileA" "$fileB" | grep '^[0-9]'
        echo "-------------line--------------"
        echo $fileLine
        modType=$(sed 's|[0-9]*,*[0-9]*\([a-z]\)[0-9]*,*[0-9]*|\1|' <<< "$fileLine")
        echo "-----------------------------MODIFICATION TYPE----------------------------"
        echo $modType
        if [[ $modType = "c" ]] ; then
          mod="un changement"
        elif [[ $modType = "d" ]]; then
          mod="une suppression"
        else
          mod="un ajout"
        fi

          if [[ -z $(sed 's|[0-9]*,.*,[0-9]*||' <<< "$fileLine") ]] ; then

          debModA=$(sed 's|\([0-9]*\),.*|\1|' <<< "$fileLine")
          finModA=$(sed 's|^.*,\([0-9]*\)[a-z].*|\1|' <<< "$fileLine")
          debModB=$(sed 's|.*[a-z]\([0-9]*\),.*|\1|' <<< "$fileLine")
          finModB=$(sed 's|.*[a-z][0-9]*,\([0-9]*\)|\1|' <<< "$fileLine")

        elif [[ -z $(sed 's|[0-9]*,[0-9]*[a-z][0-9]*||' <<< "$fileLine") ]] ; then

          debModA=$(sed 's|\([0-9]*\),.*|\1|' <<< "$fileLine")
          finModA=$(sed 's|^.*,\([0-9]*\)[a-z].*|\1|' <<< "$fileLine")
          debModB=$(sed 's|.*[a-z]\([0-9]*\)|\1|' <<< "$fileLine")
          finModB=$debModB

        elif [[ -z $(sed 's|[0-9]*[a-z][0-9]*,[0-9]*||' <<< "$fileLine") ]]; then

          debModA=$(sed 's|\([0-9]*\)[a-z].*|\1|' <<< "$fileLine")
          finModA=$debModA
          debModB=$(sed 's|.*[a-z]\([0-9]*\),.*|\1|' <<< "$fileLine")
          finModB=$(sed 's|.*[a-z][0-9]*,\([0-9]*\)|\1|' <<< "$fileLine")


        elif [[ -z $(sed 's|[0-9]*[a-z][0-9]*||' <<< "$fileLine") ]]; then

          debModA=$(sed 's|\([0-9]*\)[a-z].*|\1|' <<< "$fileLine")
          finModA=$debModA
          debModB=$(sed 's|.*[a-z]\([0-9]*\)|\1|' <<< "$fileLine")
          finModB=$debModB

        fi
        splitFileA=$(head -n "$finModA" "$fileA" | tail -n $((finModA-debModA+1)))
        splitFileB=$(head -n "$finModB" "$fileB" | tail -n $((finModB-debModB+1)))
        echo "debModA: |$debModA|"
        echo "finModA: |$finModA|"
        echo "debModB: |$debModB|"
        echo "finModB: |$finModB|"
        echo "il y a $mod entre le fichier $fileB et le fichier $fileA:"
        echo "."
        echo "-------------$fileA:"
        echo -e "$splitFileA"
        echo "."
        echo "$fileB:"
        echo "HEAD FILE"
        head -n $((debModB-1)) "$fileB"
        echo "SPLIT FILE"
        echo -e "$splitFileA"
        #echo "TAIL FILE"
        #tail -n "+$((finModB+1))" "$fileB"
        echo '.'
        echo "Que voulez-vous faire? "
        echo "."

        options=("Contenu de $fileA dans $fileB" "Contenu de $fileB dans $fileA" "Ignorer")
        select opt in "${options[@]}"; do
          error=0
          case $opt in
          "Contenu de $fileA dans $fileB")
            echo "==================$fileA IN $fileB====================="
            echo "$fileB:"
            echo "HEAD FILE"
            head -n $((debModB-1)) "$fileB"
            echo "SPLIT FILE"
            echo "$splitFileA"
            #echo "TAIL FILE"
            #tail -n "+$((finModB+1))" "$fileB"
            cat "$fileB" > "$RacineB.temp"
            fileSize=$(wc -l $RacineB.temp | sed 's|\(^[0-9]*\) .*|\1|')
            echo "---------------file size in number of lines"
            echo $fileSize
            head -n $((debModB-1)) "$RacineB.temp" > "$fileB"
            echo "------------Head File"
            cat "$fileB"
            echo "$splitFileA" >> "$fileB"
            nubrLine=$(bc <<< $fileSize-$finModB+1)
            echo "NOMBRE LIGNES TAIL"
            echo $nubrLine
            echo $((finModB))
            tail -n "+$((finModB+1))" "$RacineB.temp" >> "$fileB" #ici ça merde, POURQUOI??????
            #echo "you chose choice 1"
            ;;
          "Contenu de $fileB dans $fileA")
            cat "$fileA" > "$RacineB.temp"
            fileSize=$(wc -l $RacineB.temp)
            head -n $((debModA-1)) "$RacineB.temp" > "$fileA"
            echo "$splitFileB" >> "$fileA"
            tail -n "$((fileSize-finModA))" "$RacineB.temp" >> "$fileA"
            #echo "you chose choice 2"
            ;;
          "Ignorer")
            break
            ;;
          *) echo invalid option
            error=1
            ;;
          esac
        break
        done
        fileLine=$(diff  "$fileA" "$fileB" | grep '^[0-9]' | head -n 1)
      done
    done 3< "$conFile"
    rm "$RacineB.fileDiff"
    rm "$RacineB.temp"
}

function print {
  l=$(egrep "^$RacineA $fichier/? .*$" $RacineB.synchro)
  Jperm=$(cut -f 3 -d ' ' <<< "$l")
  Jmodif=$(cut -f 4 -d ' ' <<< "$l")
  Jsize=$(cut -f 5 -d ' ' <<< "$l")
  Jidgroup=$(cut -f 6 -d ' ' <<< "$l")
  Jidowner=$(cut -f 7 -d ' ' <<< "$l")
  echo ""
  echo -e "\t\tRacineA/$line\tJournal\t\tRacineB/$line"
  echo -e "\t\t----------------------------------------------------"
  echo -e "\e[1mType:\e[0m\t\t |  $(file -b $RacineA$line)   |\t\t |  $(file -b $RacineB$(basename $RacineA)/$line)"
  echo -e "\e[1mpermission\e[0m:\t |  $(stat -c "%a" $RacineA$line)\t\t |  $Jperm\t\t |  $(stat -c "%a" $RacineB$(basename "$RacineA")/$line)"
  echo -e "\e[1mDate modication\e[0m: |  $(stat -c "%Y" $RacineA$line)\t |  $Jmodif\t |  $(stat -c "%Y" $RacineB$(basename "$RacineA")/$line)"
  echo -e "\e[1mTaille\e[0m:\t\t |  $(stat -c "%s" $RacineA$line)\t\t |  $Jsize\t |  $(stat -c "%s" $RacineB$(basename "$RacineA")/$line)"
  echo -e "\e[1mGroupe\e[0m:\t\t |  $(stat -c "%G" $RacineA$line)\t |  $Jidgroup\t |  $(stat -c "%G" $RacineB$(basename "$RacineA")/$line)"
  echo -e "\e[1mOwner\e[0m:\t\t |  $(stat -c "%U" $RacineA$line)\t |  $Jidowner\t |  $(stat -c "%U" $RacineB$(basename "$RacineA")/$line)"
  echo ""
}

function changeMetadata {
	file1="$1"
	file2="$2"
  chemin="$3"

  Modif_perm "$file2" "$file1" "$chemin"
  Modif_owner "$file2" "$file1" "$chemin"
  Modif_group "$file2" "$file1" "$chemin"
  Modif_perm "$file2" "$file1" "$chemin"

	# chmod  $(stat -c "%a" "$file1") "$file2" #change le mode
	# chown $(stat -c "%U" "$file1") "$file2" #change le possesseur du fichier
	touch -t "$(date -r "$file1" +%y%m%d%H%M.%S)" "$file2" #change la date de modification
	# chgrp $(stat -c "%G" "$file1") "$file2" #change le groupe
	sed -i "s|^\($RacineA $chemin [0-9]\{3\}\) \(.*\)$|\1 $(stat -c "%a" "$file1") \2|" $RacineB.synchro #modifie le .synchro
  sed -i "s|^\($RacineA $chemin [0-9]\{3\} [^ ]*\) [^ ]* \(.*\)|\1 $(stat -c "%a" "$file1") \2|" $RacineB.synchro


}
#-------------------------------------------------------------------Main---------------------------------------------------------------
if [[ -e $RacineB.conflit ]]; then

  echo --"Conflit:" >> $RacineB.log
  echo ""
  while read line
  do
  	fileA="$RacineA$line"
  	fileB="$RacineB$(basename $RacineA)/$line"
  	if [[ $(diff -q $fileA $fileB) ]] ; then #si les fichiers sont différents
  		contentDiff=0 #on met un boolean à True
  	fi
  done < $conFile

  if [[ $contentDiff -eq 0 ]] ; then
  	option1=("automatique" "manuelle" "ignorer")
  	echo -e "Des conflits de contenu ont été detectés. Voulez-vous une gestion:"
  	select opt in "${options1[@]}"; do
  		error=0
  		case $opt in
  			"automatique")
          Data_automatique
  			;;

  			"manuelle")
          Data_manuelle
  			;;
  			"ignorer")
  				break
  			;;
  			*) echo Option invalide

  				;;
  		esac
  	done
  else
  	echo -e "pas de conflit de contenu"
  fi


  while read line
  do
  	fileA="$RacineA$line"
  	fileB="$RacineB$(basename $RacineA)/$line"
  	if [[ $(stat -c %Y%a%U%G $fileA) != $(stat -c %Y%a%U%G $fileB) ]] ; then #si les metadonnées sont différentes
  		metaDiff=0 #on met un boolean à True
  	fi
  done < $conFile

  if [[ $metaDiff -eq 0 ]] ; then # si difference de metadonnées
  options2=("automatique" "manuelle" "ignorer")
  echo -e "Des conflits de contenu ont été detectés. Voulez-vous une gestion:"
  select opt in "${options1[@]}"; do
  	error=0
  	case $opt in
  		"automatique" )
        Metadata_automatique
  			;;
  		"manuelle" )
        Metadata_manuelle
  			;;
  		"ignorer" )
        break
  			;;
  	esac

  done
  else
  echo "Pas de conflit de métadonné"
  fi
fi
